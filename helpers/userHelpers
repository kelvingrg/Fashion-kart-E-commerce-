var db=require('../config/connection')
var collection=require('../config/collections')
const bcrypt=require('bcrypt')
const { response } = require('../app')
var objectId=require('mongodb').ObjectId
module.exports={
    doSignup:(userData)=>{
        console.log(userData);
       return new Promise(async(resolve,reject)=>{
           console.log('dosignup user data ')
           userData.password=await bcrypt.hash(userData.password,10)// this 10 refers salt value 
            db.get().collection(collection.USER_COLLECTION).insert(userData).then((data)=>{
                console.log(data);
                resolve(data.insertId) 
               
           
            } )
                 }

                 ) 
                
                },statusUpdate:(userData)=>{
                    db.get().collection(collection.USER_COLLECTION).updateOne({email:userData.email},{$set:{status:"active"}}).then((data)=>{

                    })
                },


                userExist:(userData)=>{
                   
           console.log('user exist-user data ')  
return new Promise(async(resolve,reject)=>{
    let response={};
    let email= await db.get().collection(collection.USER_COLLECTION).findOne({email:userData.email})
                let phone= await db.get().collection(collection.USER_COLLECTION).findOne({mobileNumber:userData.mobileNumber})
                console.log(email,phone)
                if(email||phone)
                {
                if(email){
                    console.log('same email')
                    response.email=true
                }
                else{
                    response.email=false
                }
                 if(phone){
                    console.log('existing mobile number')
                    response.phone=true
                }
                else{
                    response.phone=false
                }

                resolve(response);
                }
                else{
                            response.noexist=true
                            resolve(response);
                }


})
                },
        
        doLogin:(userData)=>{
            return new Promise(async(resolve,reject)=>{
                let response={}
                // console.log(userData)
                
                let user=await db.get().collection(collection.USER_COLLECTION).findOne({email:userData.email})
                if(user){
                    bcrypt.compare(userData.password,user.password).then((status)=>{
                        if(status){
                            console.log("success")
                            response.user=user;
                            // console.log(user)
                            response.status=true;
                            resolve(response)
                        }
                        else{
                            console.log('password mismatch')
                            resolve({status:false})
                        }
                    })
                }
                else{
                    console.log('mail id  mismatch')
                            resolve({status:false})
                }
            })

        },
        doGetUser:(userData)=>{
            return new Promise(async(resolve,reject)=>{
                var user= await db.get().collection(collection.USER_COLLECTION).findOne({email:userData.email}).then((data)=>{
                    resolve(user)
                })
            })
        }
     }